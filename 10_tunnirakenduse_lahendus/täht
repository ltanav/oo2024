class StarChart implements CalculatingFunction {
  private canvas: HTMLCanvasElement;
  private ctx: CanvasRenderingContext2D;
  private radius: number;
  private centerX: number;
  private centerY: number;
  private numPoints: number;
  private innerRadius: number;
  private outerRadius: number;
  private angle: number;

  constructor(canvas: HTMLCanvasElement) {
    this.canvas = canvas;
    this.ctx = canvas.getContext('2d');
    this.radius = this.canvas.width / 2;
    this.centerX = this.canvas.width / 2;
    this.centerY = this.canvas.height / 2;
    this.numPoints = 5;
    this.innerRadius = this.radius * 0.4;
    this.outerRadius = this.radius * 0.8;
    this.angle = 0;

    this.draw();
  }

  calculate(inches: number): number {
    const inchesToCm = new InchesToCm();
    return inchesToCm.calculate(inches);
  }

  inputUnit(): string {
    return 'inches';
  }

  outputUnit(): string {
    const inchesToCm = new InchesToCm();
    return inchesToCm.outputUnit();
  }

  private draw(): void {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

    this.ctx.beginPath();
    this.ctx.moveTo(this.centerX, this.centerY);

    for (let i = 0; i <= this.numPoints; i++) {
      const x = this.centerX + this.radius * Math.cos(this.angle);
      const y = this.centerY + this.radius * Math.sin(this.angle);
      this.ctx.lineTo(x, y);
      this.angle += (2 * Math.PI) / this.numPoints;
    }

    this.ctx.closePath();
    this.ctx.strokeStyle = 'black';
    this.ctx.lineWidth = 2;
    this.ctx.stroke();

    this.ctx.beginPath();
    this.ctx.moveTo(this.centerX, this.centerY);

    for (let i = 0; i <= this.numPoints; i++) {
      const x =
        this.centerX +
        this.innerRadius * Math.cos(this.angle + (Math.PI / this.numPoints));
      const y =
        this.centerY +
        this.innerRadius * Math.sin(this.angle + (Math.PI / this.numPoints));
      this.ctx.lineTo(x, y);
      this.angle += (2 * Math.PI) / this.numPoints;
    }

    this.ctx.closePath();
    this.ctx.fillStyle = 'red';
    this.ctx.fill();

    requestAnimationFrame(() => this.draw());
  }
}
